// ------------------------------------------------------------------------------
// <auto-generated>
//     Questo codice è stato generato da uno strumento.
//     Versione runtime: 15.0.0.0
//  
//     Le modifiche a questo file possono causare un comportamento non corretto e verranno perse se
//     il codice viene rigenerato.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SOPRO.Editor.CodeGenerators
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\GitProjects\Self\SOPRO\SOPRO.Editor\CodeGenerators\SOReferenceEditorGenerator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class SOReferenceEditorGenerator : SOReferenceEditorGeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using UnityEditor;\nusing UnityEngine;\n");
            
            #line 3 "D:\GitProjects\Self\SOPRO\SOPRO.Editor\CodeGenerators\SOReferenceEditorGenerator.tt"
 if(Namespace != null && Namespace.Length > 0)
{ 
            
            #line default
            #line hidden
            this.Write("\nnamespace ");
            
            #line 3 "D:\GitProjects\Self\SOPRO\SOPRO.Editor\CodeGenerators\SOReferenceEditorGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\n{\n");
            
            #line 3 "D:\GitProjects\Self\SOPRO\SOPRO.Editor\CodeGenerators\SOReferenceEditorGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n\t/// <summary>\n    /// Class that displays properly a SOPRO.Reference on inspect" +
                    "or\n    /// </summary>\n    [CustomPropertyDrawer(typeof(");
            
            #line 3 "D:\GitProjects\Self\SOPRO\SOPRO.Editor\CodeGenerators\SOReferenceEditorGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ReferenceTypeName));
            
            #line default
            #line hidden
            this.Write("))]\n    public class ");
            
            #line 3 "D:\GitProjects\Self\SOPRO\SOPRO.Editor\CodeGenerators\SOReferenceEditorGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" : PropertyDrawer\n    {\n        /// <summary>\n        /// Options to display in t" +
                    "he popup to select constant or variable.\n        /// </summary>\n        private " +
                    "readonly string[] popupOptions = \n            { \"Use Constant\", \"Use Variable\" }" +
                    ";\n\n        /// <summary> Cached style to use to draw the popup button. </summary" +
                    ">\n        private GUIStyle popupStyle;\n\n        public override void OnGUI(Rect " +
                    "position, SerializedProperty property, GUIContent label)\n        {\n            i" +
                    "f (popupStyle == null)\n            {\n                popupStyle = new GUIStyle(G" +
                    "UI.skin.GetStyle(\"PaneOptions\"));\n                popupStyle.imagePosition = Ima" +
                    "gePosition.ImageOnly;\n            }\n\n            label = EditorGUI.BeginProperty" +
                    "(position, label, property);\n            position = EditorGUI.PrefixLabel(positi" +
                    "on, label);\n            \n            EditorGUI.BeginChangeCheck();\n\n            " +
                    "// Get properties\n            SerializedProperty useConstant = property.FindProp" +
                    "ertyRelative(\"useConstant\");\n            SerializedProperty constantValue = prop" +
                    "erty.FindPropertyRelative(\"constantValue\");\n            SerializedProperty varia" +
                    "ble = property.FindPropertyRelative(\"variable\");\n\n            // Calculate rect " +
                    "for configuration button\n            Rect buttonRect = new Rect(position);\n     " +
                    "       buttonRect.yMin += popupStyle.margin.top;\n            buttonRect.width = " +
                    "popupStyle.fixedWidth + popupStyle.margin.right;\n            position.xMin = but" +
                    "tonRect.xMax;\n\n            // Store old indent level and set it to 0, the Prefix" +
                    "Label takes care of it\n            int indent = EditorGUI.indentLevel;\n         " +
                    "   EditorGUI.indentLevel = 0;\n\n            int result = EditorGUI.Popup(buttonRe" +
                    "ct, useConstant.boolValue ? 0 : 1, popupOptions, popupStyle);\n\n            useCo" +
                    "nstant.boolValue = result == 0;\n\n            EditorGUI.PropertyField(position, \n" +
                    "                useConstant.boolValue ? constantValue : variable, \n             " +
                    "   GUIContent.none);\n\n            if (EditorGUI.EndChangeCheck())\n              " +
                    "  property.serializedObject.ApplyModifiedProperties();\n\n            EditorGUI.in" +
                    "dentLevel = indent;\n            EditorGUI.EndProperty();\n        }\n    }\n");
            
            #line 3 "D:\GitProjects\Self\SOPRO\SOPRO.Editor\CodeGenerators\SOReferenceEditorGenerator.tt"
 if(Namespace != null && Namespace.Length > 0)
{ 
            
            #line default
            #line hidden
            this.Write("\n}\n");
            
            #line 3 "D:\GitProjects\Self\SOPRO\SOPRO.Editor\CodeGenerators\SOReferenceEditorGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 3 "D:\GitProjects\Self\SOPRO\SOPRO.Editor\CodeGenerators\SOReferenceEditorGenerator.tt"

public string Namespace { get; set; }
public string ClassName { get; set; }
public string ReferenceTypeName { get; set; }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class SOReferenceEditorGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
