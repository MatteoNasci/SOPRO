<#@ template language="C#" #>
<#@ output extension=".cs" #>
using UnityEngine;
<# if(Namespace != null && Namespace.Length > 0)
{ #>
namespace <#= Namespace #>
{
<# } #>
    /// <summary>
    /// SO that holds a variable
    /// </summary>
    [CreateAssetMenu(fileName = <#= AssetFileName #>, menuName = <#= AssetMenuName #>)]
    public class <#= ClassName #> : ScriptableObject
    {
#if UNITY_EDITOR
        /// <summary>
        /// Description of the variable, available only in UNITY_EDITOR
        /// </summary>
        public string DEBUG_DeveloperDescription { get { return developerDescription; } }
        [Multiline]
        [SerializeField]
        private string developerDescription = "";
#endif
		/// <summary>
        /// Value stored in the variable
        /// </summary>
        public <#= Type #> Value;

        /// <summary>
        /// Sets value to given value
        /// </summary>
        /// <param name="value">new value</param>
        public void SetValue(<#= Type #> value)
        {
            this.Value = value;
        }
        /// <summary>
        /// Sets value to given value
        /// </summary>
        /// <param name="value">new value</param>
        public void SetValue(<#= ClassName #> value)
        {
            this.Value = value.Value;
        }
        /// <summary>
        /// Increases value of given amount
        /// </summary>
        /// <param name="amount">increase amount</param>
        public void ApplyChange(<#= Type #> amount)
        {
            this.Value += amount;
        }
        /// <summary>
        /// Increases value of given amount
        /// </summary>
        /// <param name="amount">increase amount</param>
        public void ApplyChange(<#= ClassName #> amount)
        {
            this.Value += amount.Value;
        }
		/// <summary>
        /// Conversion between variable to underlying value
        /// </summary>
        /// <param name="reference">variable to convert</param>
        public static implicit operator <#= Type #>(<#= ClassName #> variable)
        {
            return variable.Value;
        }
    }
<# if(Namespace != null && Namespace.Length > 0)
{ #>
}
<# } #>
<#+
public string AssetFileName { get; set; }
public string AssetMenuName { get; set; }
public string ClassName { get; set; }
public string Namespace { get; set; }
public string Type { get; set; }
#>