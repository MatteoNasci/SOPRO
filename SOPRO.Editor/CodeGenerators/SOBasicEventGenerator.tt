<#@ output extension=".cs" #>
<#@ template language="C#" #>
using System.Collections.Generic;
using UnityEngine;
using System;
using SOPRO;
<# if(Namespace != null && Namespace.Length > 0)
{#>
namespace <#= Namespace #> 
{
<#
}
#>
    /// <summary>
    /// Basic Scriptable Object event
    /// </summary>
    [CreateAssetMenu(fileName = <#= AssetFileName #>, menuName = <#= AssetMenuName #>)]
    [Serializable]
    public class <#= ClassName #> : <#= BaseClassName #>
    {
#if UNITY_EDITOR
        /// <summary>
        /// Description of the event, available only in UNITY_EDITOR
        /// </summary>
        [Multiline]
		[SerializeField]
        private string DEBUG_DeveloperDescription = "";
#endif

		<# if(ValidTypes.Length > 0)
		{ #>
#if UNITY_EDITOR
		 <# for(int i = 0 ; i < ValidTypes.Length ; i++)
			{ #>
			    /// <summary>
				/// Debug field for inspector view, available only in UNITY_EDITOR
				/// </summary>
				public <#= ValidTypes[i] #> <#= "DEBUG_" + ValidTypes[i] + "_" + i #> = default(<#= ValidTypes[i] #>);
		<# } #>
#endif
		<# } 
		#>
        public delegate void <#= ClassName + "Del" #>(<#= GenericArgumentsWithTypes #>);
        public event <#= ClassName + "Del" #> Event;

        /// <summary>
        /// Invokes all listeners of this event
        /// </summary>
        public override void Raise(<#= GenericArgumentsWithTypes #>)
        {
			Event.Invoke(<#= GenericArguments #>);
        }
    }
<# if(Namespace != null && Namespace.Length > 0)
{#>
}
<#
}
#>
<#+
public string Namespace { get; set; }
public string ClassName { get; set; }
public string BaseClassName { get; set; }
public string AssetFileName { get; set; }
public string AssetMenuName { get; set; }
public string GenericArgumentsWithTypes { get; set; }
public string GenericArguments { get; set; }
public string[] ValidTypes { get; set; }
#>