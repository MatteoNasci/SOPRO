<#@ output extension=".cs" #>
<#@ template language="C#" #>
using System.Collections.Generic;
using UnityEngine;
using System;
<# if(Namespace != null && Namespace.Length > 0)
{#>
namespace <#= Namespace #> 
{
<#
}
#>
    /// <summary>
    /// Scriptable Object event
    /// </summary>
    [CreateAssetMenu(fileName = <#= AssetFileName #>, menuName = <#= AssetMenuName #>)]
    [Serializable]
    public class <#= ClassName #> : ScriptableObject
    {
	<# if(ValidTypes.Length > 0)
	{ #>
	#if UNITY_EDITOR
		<# for(int i = 0 ; i < ValidTypes.Length ; i++)
		{ #>
			public <#= ValidTypes[i] #> <#= "DEBUG_" + ValidTypes[i] + "_" + i #> = default(<#= ValidTypes[i] #>);
	<# } #>
	#endif
	<# } #>

        [SerializeField]
        private readonly List<<#= SOEventListenerTypeName #>> listeners = new List<<#= SOEventListenerTypeName #>>();

        /// <summary>
        /// Invokes all listeners of this event
        /// </summary>
        public void Raise(<#= GenericArgumentsWithTypes #>)
        {
            for (int i = listeners.Count - 1; i >= 0; i--)
                listeners[i].OnEventRaised(<#= GenericArguments #>);
        }
        /// <summary>
        /// Adds listener to the event
        /// </summary>
        /// <param name="listener">listener to add</param>
        internal void AddListener(<#= SOEventListenerTypeName #> listener)
        {
            listeners.Add(listener);
        }
        /// <summary>
        /// Removes listener from the event
        /// </summary>
        /// <param name="listener">listener to remove</param>
        internal void RemoveListener(<#= SOEventListenerTypeName #> listener)
        {
            listeners.Remove(listener);
        }
    }
<# if(Namespace != null && Namespace.Length > 0)
{#>
}
<#
}
#>
<#+
public string Namespace { get; set; }
public string ClassName { get; set; }
public string AssetFileName { get; set; }
public string AssetMenuName { get; set; }
public string SOEventListenerTypeName { get; set; }
public string GenericArgumentsWithTypes { get; set; }
public string GenericArguments { get; set; }
public string[] ValidTypes { get; set; }
#>